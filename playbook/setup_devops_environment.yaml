---
- hosts: all
  name: Setup Local environment
  connection: local
  tasks:
    - name: Clone the dotfiles repository
      git:
        repo: https://github.com/nhattran2311/dotfiles.git
        dest: "{{ ansible_user_dir }}/dotfiles"
      remote_user: "{{ ansible_user }}"

    - name: Install dependencies
      become: true
      become_method: sudo
      become_user: root
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - fuse
        - zsh
        - ripgrep
        - luarocks
        - xclip
        - zip
        - fontconfig
        - pre-commit

    - name: Install typer package
      ansible.builtin.pip:
        name: typer

    - name: Create NVIM Folder
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ ansible_user_dir }}/.config/nvim"
        - "{{ ansible_user_dir }}/.local/bin"

    - name: Copy configuration files
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"  
      loop:
        - { src: "{{ ansible_user_dir }}/dotfiles/.config/nvim/", dest: "{{ ansible_user_dir }}/.config/nvim" }

    - name: Check if NEOVIM is installed
      stat:
        path: "{{ item }}"
      register: neovim_check
      with_items:
        - "{{ ansible_user_dir }}/.config/nvim"
        - "{{ ansible_user_dir }}/.local/bin"
        - "{{ ansible_user_dir }}/.local/share/nvim"

    - name: Display NEOVIM status
      debug:
        msg: "NEOVIM is already installed"
      when: neovim_check.results | map(attribute='stat.exists') | list | bool

    # - name: Install required Lua modules
    #   become: true
    #   become_method: sudo
    #   become_user: root
    #   command: luarocks install {{ item }}
    #   loop:
    #     - nvim-tree.lua
    #     - indent_blankline
    #     - transparent
    #     - toggleterm

    - name: Install NEOVIM
      raw: "{{ item }}"
      args:
        chdir: "{{ ansible_user_dir }}/dotfiles"
      loop:
        - wget https://github.com/neovim/neovim/releases/download/v0.9.1/nvim.appimage -P {{ ansible_user_dir }}/.local/share/nvim/
      when: not neovim_check.results | map(attribute='stat.exists') | list | bool

    - name: Install pynvim package
      pip:
        name: pynvim
        executable: pip3
        state: present

    - name: Download win32yank.zip
      get_url:
        url: "https://github.com/equalsraf/win32yank/releases/download/v0.0.4/win32yank-x64.zip"
        dest: "/tmp/win32yank.zip"

    - name: Extract win32yank.exe
      command: "unzip -j -o /tmp/win32yank.zip win32yank.exe -d /tmp/"

    - name: Set executable permissions for win32yank.exe
      file:
        path: "/tmp/win32yank.exe"
        mode: "+x"

    - name: Move win32yank.exe to /usr/local/bin
      command: "sudo mv /tmp/win32yank.exe /usr/local/bin/"

    - name: Set executable permissions for nvim.appimage
      command: chmod u+x "{{ ansible_user_dir }}/.local/share/nvim/nvim.appimage"
      args:
        executable: /bin/bash
      when: not neovim_check.results | map(attribute='stat.exists') | list | bool

    - name: Execute nvim.appimage
      command: "{{ ansible_user_dir }}/.local/share/nvim/nvim.appimage --headless -c 'q!'"
      args:
        executable: /bin/bash
      ignore_errors: yes
      when: not neovim_check.results | map(attribute='stat.exists') | list | bool

    - name: Create symbolic link for nvim
      file:
        src: "{{ ansible_user_dir }}/.local/share/nvim/nvim.appimage"
        dest: "{{ ansible_user_dir }}/.local/bin/nvim"
        state: link
      when: not neovim_check.results | map(attribute='stat.exists') | list | bool

###### OHMYZSH ######
    - name: Check if Oh My Zsh is installed
      stat:
        path: "{{ ansible_user_dir }}/.oh-my-zsh"
      register: ohmyzsh_check

    - name: Display Oh My Zsh status
      debug:
        msg: "Oh My Zsh is already installed"
      when: ohmyzsh_check.stat.exists

    - name: Install OHMYZSH
      shell: "{{ item }}"
      args:
        chdir: "{{ ansible_user_dir }}/dotfiles"
      loop:
        - sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
        - git clone https://github.com/zsh-users/zsh-syntax-highlighting.git {{ ansible_user_dir }}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting && git clone https://github.com/zsh-users/zsh-autosuggestions.git {{ ansible_user_dir }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions
      when: not ohmyzsh_check.stat.exists

###### StarShip ######
    - name: Check if StarShip is installed
      stat:
        path: "{{ ansible_user_dir }}/.config/starship.toml"
      register: startship_check

    - name: Display StarShip status
      debug:
        msg: "StarShip is already installed"
      when: startship_check.stat.exists

    - name: Install StarShip
      shell: "{{ item }}"
      args:
        chdir: "{{ ansible_user_dir }}/dotfiles"
      loop:
        - curl -sS https://starship.rs/install.sh | sh -s -- -y
        - cp .config/starship.toml {{ ansible_user_dir }}/.config/starship.toml
      when: not startship_check.stat.exists
      become: true
      become_user: root
      vars:
        ansible_become_pass: "{{ ansible_password }}"

###### RUST + EXA ######
    - name: Install Rust
      shell: "{{ item }}"
      args:
        chdir: "{{ ansible_user_dir }}/dotfiles"
      loop:
        - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

    - name: Set Rust environment variables
      shell: |
        source "{{ ansible_user_dir }}/.cargo/env"
      args:
        executable: /bin/bash

    - name: Install EXA
      shell: "{{ item }}"
      args:
        chdir: "{{ ansible_user_dir }}/dotfiles"
      loop:
        - "{{ ansible_user_dir }}/.cargo/bin/cargo install exa"

###### FZF ######
    - name: Check if FZF is installed
      stat:
        path: "{{ ansible_user_dir }}/.fzf/install"
      register: fzf_check

    - name: Display FZF status
      debug:
        msg: "FZF is already installed"
      when: fzf_check.stat.exists

    - name: Install FZF
      shell: "{{ item }}"
      args:
        chdir: "{{ ansible_user_dir }}/dotfiles"
      loop:
        - "git clone --depth 1 https://github.com/junegunn/fzf.git {{ ansible_user_dir }}/.fzf"
        - "yes | {{ ansible_user_dir }}/.fzf/install"
      when: not fzf_check.stat.exists

###### ZSH ######

    - name: Copy configuration files
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"  
      loop:
        - { src: "{{ ansible_user_dir }}/dotfiles/.zshrc", dest: "{{ ansible_user_dir }}/.zshrc" }

    # - name: Update ZSH Config
    #   shell: |
    #     source {{ ansible_user_dir }}/.zshrc
    #   args:
    #     executable: /usr/bin/zsh

    - name: Change default shell to Zsh for the current user (Update /etc/passwd)
      become: true
      user:
        name: "{{ ansible_user }}"
        shell: /usr/bin/zsh

    - name: Update Packer
      git:
        repo: https://github.com/wbthomason/packer.nvim
        dest: "{{ ansible_user_dir }}/.local/share/nvim/site/pack/packer/start/packer.nvim"
        depth: 1
        update: yes
      become: true
      become_user: "{{ ansible_user }}"

    # - name: Install NVIM PLUGIN
    #   shell: "{{ item }}"
    #   args:
    #     chdir: "{{ ansible_user_dir }}/dotfiles"
    #     executable: /usr/bin/zsh
    #   loop:
    #     - nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'

### DOWNLOAD NERDFONT AND INSTALLING ###
    - name: Create temporary directory
      tempfile:
        state: directory
      register: temp_dir

    - name: Download Nerd Font ZIP file
      get_url:
        url: "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/Hack.zip"
        dest: "{{ temp_dir.path }}/nerd_font.zip"

    - name: Create directory for Nerd Font extraction
      file:
        path: "{{ temp_dir.path }}/nerd_font"
        state: directory
      delegate_to: localhost

    - name: Unzip Nerd Font
      command:
        cmd: "unzip -q {{ temp_dir.path }}/nerd_font.zip -d {{ temp_dir.path }}/nerd_font"
      delegate_to: localhost
      register: unzip_result

    - name: Check unzip status
      fail:
        msg: "Unzip failed"
      when: unzip_result.rc != 0

    - name: Create fonts directory
      file:
        path: "/home/{{ ansible_user }}/.local/share/fonts/"
        state: directory
        mode: 0755
      become: true
      when: unzip_result.rc != 0

    - name: Move Nerd Font files
      command:
        cmd: "cp -R {{ temp_dir.path }}/nerd_font/ /home/{{ ansible_user }}/.local/share/fonts/"
      become: true
      when: unzip_result.rc == 0

    - name: Refresh font cache
      command: fc-cache -f -v
